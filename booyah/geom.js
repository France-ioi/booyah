"use strict";
// Geometry
Object.defineProperty(exports, "__esModule", { value: true });
exports.EPSILON = 0.001;
exports.ZERO = new PIXI.Point(0, 0);
exports.ONE = new PIXI.Point(1, 1);
/** Returns a number for x that is between min and max */
function clamp(x, min, max) {
    return Math.min(max, Math.max(min, x));
}
exports.clamp = clamp;
/** Returns the vector length of a a PIXI Point */
function magnitude(a) {
    return Math.sqrt(a.x * a.x + a.y * a.y);
}
exports.magnitude = magnitude;
/** Returns a copy of the PIXI Point x that has a magnitude between min and max */
function clampMagnitude(a, min, max) {
    const mag = magnitude(a);
    if (mag < min) {
        return multiply(a, min / mag);
    }
    else if (mag > max) {
        return multiply(a, max / mag);
    }
    else {
        return a;
    }
}
exports.clampMagnitude = clampMagnitude;
/** Returns the distance between two PIXI Points */
function distance(a, b) {
    let x = a.x - b.x;
    let y = a.y - b.y;
    return Math.sqrt(x * x + y * y);
}
exports.distance = distance;
/** Linear interpolation between numbers a and b, using the fraction p */
function lerp(a, b, p) {
    return a + (b - a) * p;
}
exports.lerp = lerp;
/** Linear interpolation between points a and b, using the fraction p */
function lerpPoint(a, b, p) {
    const x = b.x - a.x;
    const y = b.y - a.y;
    return new PIXI.Point(a.x + p * x, a.y + p * y);
}
exports.lerpPoint = lerpPoint;
/** Linear interpolation between arrays a and b, using the fraction p */
function lerpArray(a, b, p) {
    const result = [];
    for (let i = 0; i < a.length; i++) {
        result.push(lerp(a[i], b[i], p));
    }
    return result;
}
exports.lerpArray = lerpArray;
/** Linear interpolation between RGB colors a and b, using the fraction p */
function lerpColor(a, b, p) {
    // Separate into 3 components
    const aComponents = [(a & 0xff0000) >> 16, (a & 0x00ff00) >> 8, a & 0x0000ff];
    const bComponents = [(b & 0xff0000) >> 16, (b & 0x00ff00) >> 8, b & 0x0000ff];
    return ((lerp(aComponents[0], bComponents[0], p) << 16) |
        (lerp(aComponents[1], bComponents[1], p) << 8) |
        lerp(aComponents[2], bComponents[2], p));
}
exports.lerpColor = lerpColor;
/**
 Find the direction around the circle that is shorter
 Based on https://stackoverflow.com/a/2007279
 */
function angleBetweenAngles(source, target) {
    return Math.atan2(Math.sin(target - source), Math.cos(target - source));
}
exports.angleBetweenAngles = angleBetweenAngles;
/** Linear interpolation between angles a and b, using fraction p */
function lerpAngle(a, b, p) {
    return a + p * angleBetweenAngles(a, b);
}
exports.lerpAngle = lerpAngle;
/** Returns a copy of a that is > 0 */
function makeAnglePositive(a) {
    while (a < 0)
        a += 2 * Math.PI;
    return a;
}
exports.makeAnglePositive = makeAnglePositive;
/** Normalizes an angle between -pi and pi */
function normalizeAngle(a) {
    while (a > Math.PI)
        a -= 2 * Math.PI;
    while (a < -Math.PI)
        a += 2 * Math.PI;
    return a;
}
exports.normalizeAngle = normalizeAngle;
/** Converts radians to degrees */
function radiansToDegrees(a) {
    return (a * 180) / Math.PI;
}
exports.radiansToDegrees = radiansToDegrees;
/** Converts degrees to radians */
function degreesToRadians(a) {
    return (a * Math.PI) / 180;
}
exports.degreesToRadians = degreesToRadians;
/** Creates a vector pointing in the direction angle, with the length magnitude */
function vectorFromAngle(angle, magnitude = 1) {
    return new PIXI.Point(Math.cos(angle) * magnitude, Math.sin(angle) * magnitude);
}
exports.vectorFromAngle = vectorFromAngle;
/** Returns the sum of PIXI points */
function add(...points) {
    const r = new PIXI.Point();
    for (const p of points) {
        r.x += p.x;
        r.y += p.y;
    }
    return r;
}
exports.add = add;
/** Returns the difference of PIXI points */
function subtract(...points) {
    const r = new PIXI.Point(points[0].x, points[0].y);
    for (let i = 1; i < points.length; i++) {
        r.x -= points[i].x;
        r.y -= points[i].y;
    }
    return r;
}
exports.subtract = subtract;
/** Returns the multiplication of a PIXI point by a scalar */
function multiply(a, p) {
    return new PIXI.Point(a.x * p, a.y * p);
}
exports.multiply = multiply;
/** Returns the division of a PIXI point by a scalar */
function divide(a, p) {
    return new PIXI.Point(a.x / p, a.y / p);
}
exports.divide = divide;
/** Returns a PIXI point with each element rounded down */
function floor(p) {
    return new PIXI.Point(Math.floor(p.x), Math.floor(p.y));
}
exports.floor = floor;
/** Returns a PIXI point with each element rounded */
function round(p) {
    return new PIXI.Point(Math.round(p.x), Math.round(p.y));
}
exports.round = round;
/** Returns a PIXI point that has the minimum of each component */
function min(...points) {
    const r = new PIXI.Point(Infinity, Infinity);
    for (const p of points) {
        r.x = Math.min(p.x, r.x);
        r.y = Math.min(p.y, r.y);
    }
    return r;
}
exports.min = min;
/** Returns a PIXI point that has the maximum of each component */
function max(...points) {
    const r = new PIXI.Point(-Infinity, -Infinity);
    for (const p of points) {
        r.x = Math.max(p.x, r.x);
        r.y = Math.max(p.y, r.y);
    }
    return r;
}
exports.max = max;
/** Returns true if the point p is between points min and max */
function inRectangle(p, min, max) {
    return p.x >= min.x && p.x <= max.x && p.y >= min.y && p.y <= max.y;
}
exports.inRectangle = inRectangle;
/** Takes the mean of PIXI points */
function average(...points) {
    let sum = new PIXI.Point();
    for (let point of points)
        sum = add(sum, point);
    return divide(sum, points.length);
}
exports.average = average;
/**
 Returs a point along the line between a and b, moving at a given speed.
 Will not "overshoot" b.
 */
function moveTowards(a, b, speed) {
    const d = distance(a, b);
    return lerpPoint(a, b, clamp(speed / d, 0, 1));
}
exports.moveTowards = moveTowards;
exports.moveTowardsPoint = moveTowards;
/**
 Returs an angle between a and b, turning at a given speed.
 Will not "overshoot" b.
 */
function moveTowardsAngle(a, b, speed) {
    const diff = angleBetweenAngles(a, b);
    if (diff >= 0) {
        const targetDiff = Math.min(diff, speed);
        return a + targetDiff;
    }
    else {
        const targetDiff = Math.min(-diff, speed);
        return a - targetDiff;
    }
}
exports.moveTowardsAngle = moveTowardsAngle;
/**
 Returns a number along the line between a and b, moving at a given speed.
 Will not "overshoot" b.
 */
function moveTowardsScalar(a, b, speed) {
    const d = Math.abs(b - a);
    return lerp(a, b, clamp(speed / d, 0, 1));
}
exports.moveTowardsScalar = moveTowardsScalar;
/** Returns a random number between a amd b */
function randomInRange(a, b) {
    return a + Math.random() * (b - a);
}
exports.randomInRange = randomInRange;
/** Returns a random point between a amd b, with each component considered separately */
function randomPointInRange(min, max) {
    return new PIXI.Point(randomInRange(min.x, max.x), randomInRange(min.y, max.y));
}
exports.randomPointInRange = randomPointInRange;
/* Returns true if point is within distance d of otherPoints */
function withinDistanceOfPoints(point, d, otherPoints) {
    for (const otherPoint of otherPoints) {
        if (distance(point, otherPoint) <= d)
            return true;
    }
    return false;
}
exports.withinDistanceOfPoints = withinDistanceOfPoints;
/**
 Returns a point that is a given distance away from of otherPoints.
 Warning: Could loop for a while, maybe forever!
 */
function randomPointAwayFromOthers(min, max, distanceFromPoints, existingPoints) {
    while (true) {
        const newPoint = randomPointInRange(min, max);
        if (!withinDistanceOfPoints(newPoint, distanceFromPoints, existingPoints))
            return newPoint;
    }
}
exports.randomPointAwayFromOthers = randomPointAwayFromOthers;
//# sourceMappingURL=data:application/json;base64,